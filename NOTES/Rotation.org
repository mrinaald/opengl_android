* Rotation

** Rodrigues' Rotation Formula
This is an efficient algorithm for rotating a vector in space, given an axis and angle of rotation. This is pretty useful in case we want to rotate a vector without the use of any Rotation Matrix. This formula is not used in the current application.

#+CAPTION: This is my understanding of the derivation of this formula.
[[file:imgs/rodrigues.jpg]]


** Quaternion
This is the algorithm which is currently used in the application. This method makes sure that the situation of [[https://en.wikipedia.org/wiki/Gimbal_lock][Gimbal Lock]] does not arise while rotating.

*NOTE:*
The Cprogramming tutorial of Quaternions has a little mistake (Row2Col3 and Row3Col2), or might be they had done something differently. The final rotation matrix from the quaternion is as follows:

#+ATTR_LATEX: :mode math :environment bmatrix
| 1-2y2-2z2 | 2xy-2wz   | 2xz+2wy   | 0 |
| 2xy+2wz   | 1-2x2-2z2 | 2yz-2wx   | 0 |
| 2xz-2wy   | 2yz+2wx   | 1-2x2-2y2 | 0 |
| 0         | 0         | 0         | 1 |


** References
- [[https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula][Rodrigues' rotation formula]]
- [[https://www.cprogramming.com/tutorial/3d/rotationMatrices.html][Rotations in Three Dimensions: 3D Rotation Matrices]]
- [[https://www.cprogramming.com/tutorial/3d/rotation.html][3D Rotation About an Arbitrary Axis: Rodrigues' Formula]]
- [[https://www.cprogramming.com/tutorial/3d/quaternions.html][Using Quaternion to Perform 3D rotations]]
